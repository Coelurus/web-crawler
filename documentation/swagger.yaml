openapi: 3.0.0
info:
  title: WebCrawler API
  version: 1.0.0
  description: API for managing website records and executions in the WebCrawler system.

tags:
  - name: website records
    description: Everything about website records
  - name: executions
    description: Executed website records
  - name: tags
    description: Marking website records

paths:
  /websites:
    get:
      tags:
        - website records
      summary: Get all website records
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebsiteRecord"
    post:
      tags:
        - website records
      summary: Create a new website record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebsiteRecord"
      responses:
        "201":
          description: Website record created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteRecord"
        "400":
          description: Invalid input
        "422":
          description: Validation exception

  /websites/{id}:
    get:
      tags:
        - website records
      summary: Get a website record by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: Website record ID.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteRecord"
        "404":
          description: Website record not found
    put:
      summary: Update a website record by ID
      tags:
        - website records
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Website record ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebsiteRecord"
      responses:
        "200":
          description: Website record updated
        "404":
          description: Website record not found
    delete:
      summary: Remove a website record by ID
      description: Remove a website record and all associated executions
      tags:
        - website records
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Website record ID.
      responses:
        "204":
          description: Website record updated

  /executions:
    get:
      tags:
        - executions
      summary: Get all executions
      description: Retrieve all or list filtered by website record of executions
      parameters:
        - in: query
          name: websiteId
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"

  /executions/{id}:
    get:
      tags:
        - executions
      summary: Get an execution by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Execution ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
        "404":
          description: Execution not found

  /execute/{wr_id}:
    post:
      tags:
        - executions
      summary: Manually start an execution
      description: Manually trigger a new execution for a given website record.
      parameters:
        - in: path
          name: wr_id
          required: true
          schema:
            type: integer
            format: int64
            description: ID of the website record to execute.
      responses:
        "201":
          description: Execution started successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
        "404":
          description: Website record not found

  /tags:
    get:
      tags:
        - tags
      summary: Get all tags
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"

components:
  schemas:
    WebsiteRecord:
      type: object
      required:
        - id
        - label
        - url
        - boundaryRegExp
        - periodicity
        - active
        - tags
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the website record
          example: 3
        label:
          type: string
          description: User given label
          example: Webiku webiku ukaž svá tajemství!
        url:
          type: string
          format: url
          description: Starting URL for the crawler.
          example: https://webik.ms.mff.cuni.cz/nswi153/seminar-project-webcrawler.html
        boundaryRegExp:
          type: string
          description: Regular expression used to limit which links are crawled.
          example: .*wiki.*
        periodicity:
          $ref: "#/components/schemas/PeriodicityTime"
          description: How often should the crawling happen.
        active:
          type: boolean
          description: Whether crawler is currently active.
          example: true
        tags:
          description: Array of tags assigned to record.
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        crawledData:
          $ref: "#/components/schemas/CrawledWebsite"

    Tag:
      description: User given strings for web records
      type: object
      required:
        - id
        - name

      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of tag
          example: 5
        name:
          type: string
          description: Name of the tag
          example: University
        assigned_to:
          $ref: "#/components/schemas/WebsiteRecord"

    PeriodicityTime:
      description: How often should the crawling happen. Sum of all attributes.
      type: object
      required:
        - id
        - minute
        - hour
        - day
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the peridicity
          example: 3
        minute:
          type: integer
          format: int64
          description: Number of minutes between crawls
          example: 30
        hour:
          type: integer
          format: int64
          description: Number of hours between crawls
          example: 1
        day:
          type: integer
          format: int64
          description: Number of days between crawls
          example: 0

    Execution:
      description: Information about one crawling of website
      type: object
      required:
        - id
        - website
        - status
        - startTime
        - endTime
        - crawledCount
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of execution
          example: 9
        website:
          $ref: "#/components/schemas/WebsiteRecord"
          description: Website record for which execution was created
        status:
          type: string
          enum: [pending, in_progress, completed, failed]
          description: Status of the execution
          example: pending
        startTime:
          type: string
          format: date-time
          description: When was the execution started.
          example: 2017-07-21T17:32:28Z
        endTime:
          type: string
          format: date-time
          description: When was the execution finished.
          example: 2024-07-21T18:12:18Z
        crawledCount:
          type: integer
          format: int64
          description: Number of website successfully crawled during this execution
          example: 2611

    CrawledWebsite:
      description: Crawled data of one page
      type: object
      required:
        - id
        - url
        - title
        - crawlTime
        - links
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of crawled website
          example: 78
        url:
          type: string
          format: url
          description: Address of website
          example: https://cs.wikipedia.org/wiki/CRUD
        title:
          type: string
          description: Page title
          example: CRUD
        crawlTime:
          type: string
          format: time
          example: 00:12:32
        links:
          type: array
          items:
            $ref: "#/components/schemas/CrawledWebsite/properties/id"
            #ormat: url
            #example: https://cs.wikipedia.org/wiki/Programov%C3%A1n%C3%AD
