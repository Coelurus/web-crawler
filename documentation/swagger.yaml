openapi: 3.0.0
info:
  title: WebCrawler API
  version: 1.0.0
  description: API for managing website records and executions in the WebCrawler system.

servers:
  - url: http://localhost:8080/api
    description: Local development server

tags:
  - name: website records
    description: Everything about website records
  - name: executions
    description: Executed website records
  - name: tags
    description: Marking website records
  - name: crawling
    description: What have you found

paths:
  /websites:
    get:
      tags:
        - website records
      summary: Get all website records
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebsiteRecordOut"
    post:
      tags:
        - website records
      summary: Create a new website record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebsiteRecordIn"
      responses:
        "201":
          description: Website record created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteRecordOut"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /websites/{id}:
    get:
      tags:
        - website records
      summary: Get a website record by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          description: Website record ID.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebsiteRecordOut"
        "404":
          description: Website record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a website record by ID
      tags:
        - website records
      parameters:
        - in: path
          name: id
          required: true 
          schema:
            type: string
          description: Website record ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebsiteRecordIn"
      responses:
        "200":
          description: Website record updated
        "404":
          description: Website record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Remove a website record by ID
      description: Remove a website record and all associated executions
      tags:
        - website records
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Website record ID.
      responses:
        "204":
          description: Website record updated

  /websites/url:
    get:
      tags:
        - website records
      summary: Get all website records crawling given URL
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          description: URL to search for
      responses:
        "200":
          description: List of website records that crawled the given URL. Empty list if none found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebsiteRecordOut"


  /executions:
    get:
      tags:
        - executions
      summary: Get all executions
      description: Retrieve all or list filtered by website record of executions
      parameters:
        - in: query
          name: websiteId
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"

  /executions/{id}:
    get:
      tags:
        - executions
      summary: Get an execution by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Execution ID
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
        "404":
          description: Execution not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /execute/{wr_id}:
    post:
      tags:
        - executions
      summary: Manually start an execution
      description: Manually trigger a new execution for a given website record.
      parameters:
        - in: path
          name: wr_id
          required: true
          schema:
            type: integer
            format: int64
            description: ID of the website record to execute.
      responses:
        "200":
          description: Execution started successfully

        "404":
          description: Website record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /deactivate/{wr_id}:
    post:
      tags:
        - executions
      summary: Deactivate periodical executions
      description: Deactivate periodical execution for a given website record.
      parameters:
        - in: path
          name: wr_id
          required: true
          schema:
            type: integer
            format: int64
            description: ID of the website record to stop execute once a time.
      responses:
        "200":
          description: Periodical executions stopped

        "404":
          description: Website record not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /tags:
    get:
      tags:
        - tags
      summary: Get all tags
      description: Get string names of all tags saved in db
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: UNI

  /crawl/data:
    get:
      tags:
        - crawling
      summary: Get information about crawled websites
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrawledWebsite"

  /crawl/data/{execution_id}:
    get:
      tags:
        - crawling
      summary: Get crawled websites from one execution
      parameters:
        - in: path
          name: execution_id
          required: true
          description: ID of the execution under which this website was crawled.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrawledWebsite"

  /crawl/link:
    get:
      tags:
        - crawling
      summary: Get links between crawled websites
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrawlLink"

  /crawl/link/{execution_id}:
    get:
      tags:
        - crawling
      summary: Get links between crawled websites from one execution
      parameters:
        - in: path
          name: execution_id
          required: true
          description: ID of the execution under which this website was crawled.
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CrawlLink"

components:
  schemas:
    WebsiteRecordIn:
      type: object
      required:
        - id
        - label
        - url
        - boundaryRegExp
        - periodicity
        - active
        - tags
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the website record
          example: 3
        label:
          type: string
          description: User given label
          example: Webiku webiku ukaž svá tajemství!
        url:
          type: string
          format: url
          description: Starting URL for the crawler.
          example: https://webik.ms.mff.cuni.cz/nswi153/seminar-project-webcrawler.html
        boundaryRegExp:
          type: string
          description: Regular expression used to limit which links are crawled.
          example: .*wiki.*
        periodicity:
          type: string
          example: 1:20:00
          description: How often should the crawling happen.
        active:
          type: boolean
          description: Whether crawler is currently active.
          example: true
        tags:
          description: Array of tags assigned to record.
          type: array
          items:
            type: string
            example: UNI
        crawledData:
          type: integer
          format: int64
          description: Id of data with crawling results

    WebsiteRecordOut:
      type: object
      required:
        - id
        - label
        - url
        - boundaryRegExp
        - periodicity
        - active
        - tags
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the website record
          example: 3
        label:
          type: string
          description: User given label
          example: Webiku webiku ukaž svá tajemství!
        url:
          type: string
          format: url
          description: Starting URL for the crawler.
          example: https://webik.ms.mff.cuni.cz/nswi153/seminar-project-webcrawler.html
        boundaryRegExp:
          type: string
          description: Regular expression used to limit which links are crawled.
          example: .*wiki.*
        periodicity:
          $ref: "#/components/schemas/PeriodicityTime"
          description: How often should the crawling happen.
        active:
          type: boolean
          description: Whether crawler is currently active.
          example: true
        tags:
          description: Array of tags assigned to record.
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        crawledData:
          $ref: "#/components/schemas/CrawledWebsite"

    Tag:
      description: User given strings for web records
      type: object
      required:
        - id
        - name

      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of tag
          example: 5
        name:
          type: string
          description: Name of the tag
          example: University
        assigned_to:
          type: integer
          format: int64
          example: 1
          description: Id of website record to which is this tag assigned

    PeriodicityTime:
      description: How often should the crawling happen. Sum of all attributes.
      type: object
      required:
        - id
        - minute
        - hour
        - day
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the periodicity
          example: 3
        minute:
          type: integer
          format: int64
          description: Number of minutes between crawls
          example: 30
        hour:
          type: integer
          format: int64
          description: Number of hours between crawls
          example: 1
        day:
          type: integer
          format: int64
          description: Number of days between crawls
          example: 0

    Execution:
      description: Information about one crawling of website
      type: object
      required:
        - id
        - website
        - status
        - startTime
        - endTime
        - crawledCount
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of execution
          example: 9
        website:
          $ref: "#/components/schemas/WebsiteRecordOut"

          description: Website record for which execution was created
          example: 1
        status:
          type: string
          enum: [PENDING, STARTED, FINISHED, FAILED]
          description: Status of the execution
          example: FINISHED
        startTime:
          type: string
          format: date-time
          description: When was the execution started.
          example: 2017-07-21T17:32:28Z
        endTime:
          type: string
          format: date-time
          description: When was the execution finished.
          example: 2024-07-21T18:12:18Z
        crawledCount:
          type: integer
          format: int64
          description: Number of website successfully crawled during this execution
          example: 2611

    CrawledWebsite:
      description: Crawled data of one page
      type: object
      required:
        - id
        - url
        - title
        - executionId
        - state
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of crawled website
          example: 78
        url:
          type: string
          format: url
          description: Address of website
          example: https://cs.wikipedia.org/wiki/CRUD
        title:
          type: string
          description: Page title
          example: CRUD
        crawlTime:
          type: string
          format: time
          example: 00:12:32
        executionId:
          description: Id of execution that invoked this search
          type: integer
          format: int64
          example: 33
        state:
          description: The state of crawl on this page
          type: string
          enum: [SEARCHED, TO BE SEARCHED, NOT MATCHED, INACCESSIBLE]

    CrawlLink:
      description: oriented edge between two crawled websites created by existing <a> element
      required:
        - id
        - from_id
        - to_id
        - execution_id
      properties:
        id:
          description: Identifier of edge
          type: integer
          format: int64
          example: 54
        from_id:
          description: ID of page where is a link
          type: integer
          format: int64
          example: 3
        to_id:
          description: Target of a link
          type: integer
          format: int64
          example: 4
        execution_id:
          description: ID of execution under which this crawling happened
          type: integer
          format: int64
          example: 3

    ErrorResponse:
      description: Response returned to user on error
      type: object
      required:
        - errors
      properties:
        errors:
          description: array of all errors that happened
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"

    ErrorDetail:
      description: Concrete information about one error
      type: object
      required:
        - code
        - scope
      properties:
        code:
          description: Information about what happened
          type: string
          example: FIELD_INVALID
        scope:
          description: Information about where it happened
          type: string
          example: label
